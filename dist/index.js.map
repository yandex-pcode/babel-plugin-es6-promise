{"version":3,"sources":["../src/index.js"],"names":["api","visitor","Program","path","state","options","Object","assign","defaultOptions","opts","buildPolyfill","pragma","replacement","name","scope","generateUid","used","traverse","replaceIdentifier","getReplacement","t","identifier","unshiftContainer","PROMISE","ReferencedIdentifier","node","getBindingIdentifier","replaceWithSourceString","replaceWith"],"mappings":";;;;;;kBA0Be,UAAUA,GAAV,EAAe;AAC5B,SAAO;AACLC,aAAS;AACPC,aADO,YACEC,IADF,EACQC,KADR,EACe;AACpB,YAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,cAAlB,EAAkCJ,MAAMK,IAAxC,CAAhB;AACA,YAAMC,gBAAgB,6BAASL,QAAQM,MAAjB,CAAtB;AACAC,sBAAcP,QAAQO,WAAtB;;AAEA,YAAMC,OAAOV,KAAKW,KAAL,CAAWC,WAAX,CAAuB,SAAvB,CAAb;;AAEA,YAAIC,OAAO,KAAX;AACAb,aAAKc,QAAL,CAAcC,iBAAd,EAAiC;AAC/BC,wBAD+B,cACb;AAChBH,mBAAO,IAAP;AACA,mBAAOI,EAAEC,UAAF,CAAaR,IAAb,CAAP;AACD;AAJ8B,SAAjC;;AAOA,YAAIG,IAAJ,EAAU;AACRb,eAAKmB,gBAAL,CAAsB,MAAtB,EAA8BZ,cAAc;AAC1Ca,qBAASH,EAAEC,UAAF,CAAaR,IAAb;AADiC,WAAd,CAA9B;AAGD;AACF;AArBM;AADJ,GAAP;AAyBD,C;;AApDD;;;;AACA;;IAAYO,C;;;;;;AAEZ,IAAMZ,iBAAiB;AACrBG,qHADqB;AAKrBC,eAAa;AALQ,CAAvB;;AAQA,IAAIA,cAAc,EAAlB;;AAEA,IAAMM,oBAAoB;AACxBM,sBADwB,YACFrB,IADE,EACI;AAAA,QAClBsB,IADkB,GACFtB,IADE,CAClBsB,IADkB;AAAA,QACZX,KADY,GACFX,IADE,CACZW,KADY;;;AAG1B,QAAIW,KAAKZ,IAAL,KAAc,SAAlB,EAA6B;AAC7B,QAAIC,MAAMY,oBAAN,CAA2BD,KAAKZ,IAAhC,CAAJ,EAA2C;;AAE3CD,kBACIT,KAAKwB,uBAAL,CAA6Bf,WAA7B,CADJ,GAEIT,KAAKyB,WAAL,CAAiB,KAAKT,cAAL,EAAjB,CAFJ;AAGD;AAVuB,CAA1B","file":"index.js","sourcesContent":["import template from 'babel-template'\nimport * as t from 'babel-types'\n\nconst defaultOptions = {\n  pragma: `\n  var PROMISE = typeof Promise === 'undefined'\n    ? require('es6-promise').Promise\n    : Promise`,\n  replacement: null\n}\n\nlet replacement = '';\n\nconst replaceIdentifier = {\n  ReferencedIdentifier (path) {\n    const { node, scope } = path\n\n    if (node.name !== 'Promise') return\n    if (scope.getBindingIdentifier(node.name)) return\n\n    replacement\n      ? path.replaceWithSourceString(replacement)\n      : path.replaceWith(this.getReplacement())\n  }\n}\n\nexport default function (api) {\n  return {\n    visitor: {\n      Program (path, state) {\n        const options = Object.assign({}, defaultOptions, state.opts)\n        const buildPolyfill = template(options.pragma)\n        replacement = options.replacement\n\n        const name = path.scope.generateUid('Promise')\n\n        let used = false\n        path.traverse(replaceIdentifier, {\n          getReplacement () {\n            used = true\n            return t.identifier(name)\n          }\n        })\n\n        if (used) {\n          path.unshiftContainer('body', buildPolyfill({\n            PROMISE: t.identifier(name)\n          }))\n        }\n      }\n    }\n  }\n}\n"]}