{"version":3,"sources":["../src/index.js"],"names":["api","pluginOptions","options","Object","assign","defaultOptions","buildPolyfill","pragma","replacement","visitor","Program","path","name","scope","generateUid","used","traverse","replaceIdentifier","getReplacement","t","identifier","unshiftContainer","PROMISE","ReferencedIdentifier","node","getBindingIdentifier","replaceWith"],"mappings":";;;;;;kBAsBe,UAAUA,GAAV,EAAeC,aAAf,EAA8B;AAC3C,MAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,cAAlB,EAAkCJ,aAAlC,CAAhB;AACA,MAAMK,gBAAgB,6BAASJ,QAAQK,MAAjB,CAAtB;AACA,MAAMC,cAAcN,QAAQM,WAA5B;;AAEA,SAAO;AACLC,aAAS;AACPC,aADO,YACEC,IADF,EACQ;AACb,YAAMC,OAAOD,KAAKE,KAAL,CAAWC,WAAX,CAAuB,SAAvB,CAAb;;AAEA,YAAIC,OAAO,KAAX;AACAJ,aAAKK,QAAL,CAAcC,iBAAd,EAAiC;AAC/BC,wBAD+B,cACb;AAChBH,mBAAO,IAAP;AACA,mBAAOP,eAAeW,EAAEC,UAAF,CAAaR,IAAb,CAAtB;AACD;AAJ8B,SAAjC;;AAOA,YAAIG,IAAJ,EAAU;AACRJ,eAAKU,gBAAL,CAAsB,MAAtB,EAA8Bf,cAAc;AAC1CgB,qBAASd,eAAeW,EAAEC,UAAF,CAAaR,IAAb;AADkB,WAAd,CAA9B;AAGD;AACF;AAjBM;AADJ,GAAP;AAqBD,C;;AAhDD;;;;AACA;;IAAYO,C;;;;;;AAEZ,IAAMd,iBAAiB;AACrBE,qHADqB;AAKrBC,eAAa;AALQ,CAAvB;;AAQA,IAAMS,oBAAoB;AACxBM,sBADwB,YACFZ,IADE,EACI;AAAA,QAClBa,IADkB,GACFb,IADE,CAClBa,IADkB;AAAA,QACZX,KADY,GACFF,IADE,CACZE,KADY;;;AAG1B,QAAIW,KAAKZ,IAAL,KAAc,SAAlB,EAA6B;AAC7B,QAAIC,MAAMY,oBAAN,CAA2BD,KAAKZ,IAAhC,CAAJ,EAA2C;;AAE3CD,SAAKe,WAAL,CAAiB,KAAKR,cAAL,EAAjB;AACD;AARuB,CAA1B","file":"index.js","sourcesContent":["import template from 'babel-template'\nimport * as t from 'babel-types'\n\nconst defaultOptions = {\n  pragma: `\n  var PROMISE = typeof Promise === 'undefined'\n    ? require('es6-promise').Promise\n    : Promise`,\n  replacement: null\n}\n\nconst replaceIdentifier = {\n  ReferencedIdentifier (path) {\n    const { node, scope } = path\n\n    if (node.name !== 'Promise') return\n    if (scope.getBindingIdentifier(node.name)) return\n\n    path.replaceWith(this.getReplacement())\n  }\n}\n\nexport default function (api, pluginOptions) {\n  const options = Object.assign({}, defaultOptions, pluginOptions)\n  const buildPolyfill = template(options.pragma)\n  const replacement = options.replacement\n\n  return {\n    visitor: {\n      Program (path) {\n        const name = path.scope.generateUid('Promise')\n\n        let used = false\n        path.traverse(replaceIdentifier, {\n          getReplacement () {\n            used = true\n            return replacement || t.identifier(name)\n          }\n        })\n\n        if (used) {\n          path.unshiftContainer('body', buildPolyfill({\n            PROMISE: replacement || t.identifier(name)\n          }))\n        }\n      }\n    }\n  }\n}\n"]}